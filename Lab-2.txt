Lab 2: Batch processing of commands
Relevant topics: files, pipes, fork and inter-process communication.

Specification: To be implemented and shown in lab

A file contains a  list of commands, one per each line, with variable number of arguments. Write a C program to read each command and its arguments and execute them. The program terminates when all the commands are completed. 

E.g., Sample Commands in the file:

ls -al
wc prog.c (replace with your program name)
ping www.google.com
whoami
touch newfile.c
cp prog.c newfile.c
diff prog.c newfile.c
rm prog.c
gcc newfile.c -o newfile.out

Relevant Background and Examples

0. Reading and writing from/to files

FILE *fopen(const char *path, const char *mode);

mode: 
"r" (read), 
"r+" (read+write), 
"w" (truncate file to zero or create text file)
"w+": (read+write)
'a': (append)
'a+':(reading+appending)


size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);

fread(buff, SIZE, NUMELEM, fd)

 size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);

 fwrite(buff,SIZE, strlen(buff),fd)

int fseek(FILE *stream, long offset, int whence);
fseek(fd,11,SEEK_CUR)

Practice Example 0:

1. Create an empty file
2. Write numbers 1 to 15 separated by spaces into it
3. Close the file
4. Open the file again
5. Read the first 5 numbers
6. Close the file
7. Open the file again
8. Write numbers 20-25 in the first five locations of the file, overwriting the numbers 1-5
9. Copy all the numbers from 10 and above into an integer array
10. Close the file

1. Use man fork to learn about the fork commands available on your configuration.

2. Example 1: compile the following code to create a simple child-parent

#include <stdio.h>
#include<stdlib.h>
#include<sys/wait.h>
#include<unistd.h>
int main(char *argv[], int argc)
{
    pid_t pid;
    int r;
    int a;
    int b;
      // check a and b

    pid=fork();
    // check pid

    if(pid==0)
    { //CHILD PROCESS
            printf("\nChild : %d, %d\n",pid_t, getpid());
	exit(0);
    }
    else
    { //PARENT PROCESS
            printf("\nParent %d, %d\n",pid_t, getpid());
           wait();

    }
    return 0;
}


